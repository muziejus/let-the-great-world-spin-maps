<%# encoding: utf-8 %>
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Maps for _Let the Great World Spin_</title>
    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <!-- Optional theme -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css" integrity="sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp" crossorigin="anonymous">
    <link rel="stylesheet" href="https://npmcdn.com/leaflet@1.0.0-rc.3/dist/leaflet.css" />
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
    <style>
      #map { height: 600px; }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>Maps of <em>Let the Great World Spin</em></h1>
      <h2>5-instance rolling and cumulative mean centers of each POV of the novel.</h2>
      <div id="map"></div>

      <p>The automatically showing layer is the mean center of each POV.
        Clicking on a circle will reveal which of the 12 POVs is represented.
        The layer menu (top right corner) reveals the 5-instance rolling and
        cumulative mean centers, respectively, of each POV.</p>

      <p>Both sets of data show, then, how the geographical
        &ldquo;center&rdquo; of the novel moves over narrative time. For
        example, Ciaran&rsquo;s POV shows a general movement from Dublin to
        NYC, stopping somewhere over the Atlantic, which fits the tone of his
        section of the novel (the first full chapter). But on a 5-instance
        rolling basis, we also see that Ciaran is all over the place,
        persistently thinking or mentioning places not in NYC well after moving
        there.</p>

      <p>Geographical calculations done with the suprisingly flexible and
        friendly <a href="http://turfjs.org" target="_blank">Turf.js</a>.
        Currently disabled animated markers courtesy of Leaflet&rsquo;s <a
          href="https://github.com/ewoken/Leaflet.MovingMarker"
          target="_blank">MovingMarker</a> extension. Data is by Moacir P. de S&aacute;
        Pereira and taken from <a href="http://nywalker.newyorkscapes.org"
          target="_blank">NYWalker</a>. The faint circles represent instances
        mentioned in the text, and each is connected to a line segment on the
        cumulative line by a faint grey line.</p>
    
      <p>This is part of an instance of &ldquo;everyday criticism.&rdquo; Experimentation
        is part of everyday criticism, and this was easier and more fun than
        fighting with python and ArcGIS.</p>
    </div>

    <!-- Latest compiled and minified JavaScript -->
    <script src="https://code.jquery.com/jquery-3.1.0.slim.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
    <script src="https://npmcdn.com/leaflet@1.0.0-rc.3/dist/leaflet.js"></script>
		<script src="/vendor/MovingMarker.js"></script>
    <script src="https://api.mapbox.com/mapbox.js/plugins/turf/v2.0.2/turf.min.js"></script>
    <script src="/app.js"></script>

    <script>
      var map = L.map('map').setView([40, -6], 3);
      L.tileLayer('http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> &copy; <a href="http://cartodb.com/attributions">CartoDB</a>',
        subdomains: 'abcd',
        maxZoom: 19
      }).addTo(map);

      var allPointsGeoJSON = <%= geo_json %>;
      var colors = ['#8dd3c7','#ffffb3','#bebada','#fb8072','#80b1d3','#fdb462','#b3de69','#fccde5','#d9d9d9','#bc80bd','#ccebc5','#ffed6f'];
      <% specials.each do |special| %>
        var <%= special.sub(/ /, "") %> = { text: "<%= special %>", name: "<%= special.capitalize %>" };
      <% end %>
      var instances = { 
        special: [<%= specials.join(",").sub(/ /, "").gsub(/,/, ", ") %>],
        overlay: {},
        //overlay: {"All weighted centers": this.centers},
        centers: L.layerGroup([])
      };
      instances.special.forEach(function(item, index) {
        item.color = colors[index];
        item.shadeColor = shadeColor2(item.color, -0.20);
        item.points = getSpecialPoints(allPointsGeoJSON, item.text);
        item.runningLineLayer = L.geoJson(getRunningLine(item.points), { style: { "color": item.shadeColor, "weight": 3, "opacity": 0.9 } });
        item.accumulatorLineLayer = L.geoJson(getAccumulatorLine(item.points), { style: { "color": item.color, "weight": 3, "opacity": 0.9 } });
        item.weightedCenterLayer = L.geoJson(turf.centroid({ "type": "FeatureCollection", "features": item.points }), {
          pointToLayer: function(feature, latlng) {
            return L.circleMarker(latlng, { radius: 8, fillColor: item.color, color: "#666", weight: 1, opacity: 0.8, fillOpacity: 0.8 });
          },
          onEachFeature: function(feature, layer) {
            layer.bindPopup(item.name + " center");
          }
        });
        item.runningPointsLayer = L.geoJson(getRunningPoints(item.points), {
          pointToLayer: function(feature, latlng) {
            return L.circleMarker(latlng, { radius: 4, fillColor: item.shadeColor, color: "#666", weight: 1, opacity: 0.8, fillOpacity: 0.8 });
          },
          onEachFeature: function(feature, layer) {
            layer.bindPopup(feature.popup);
          }
        });
        item.accumulatorPointsLayer = L.geoJson(getAccumulatorPoints(item.points), {
          pointToLayer: function(feature, latlng) {
            return L.circleMarker(latlng, { radius: 4, fillColor: item.color, color: "#666", weight: 1, opacity: 0.8, fillOpacity: 0.8 });
          },
          onEachFeature: function(feature, layer) {
            layer.bindPopup(feature.popup);
          }
        });
        instances.overlay[item.name + " rolling center"] = L.layerGroup([item.runningLineLayer, item.runningPointsLayer]);
        instances.overlay[item.name + " accumulator center"] = L.layerGroup([item.accumulatorLineLayer, item.accumulatorPointsLayer]);
        instances.centers.addLayer(item.weightedCenterLayer);
      });

      L.control.layers(null, instances.overlay).addTo(map);
      instances.centers.addTo(map);
      

    </script>

  </body>
</html>
